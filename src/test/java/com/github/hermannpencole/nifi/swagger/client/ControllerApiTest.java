/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.5.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.hermannpencole.nifi.swagger.client;

import com.github.hermannpencole.nifi.swagger.ApiException;
import com.github.hermannpencole.nifi.swagger.client.model.BulletinEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ClusterEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ControllerConfigurationEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ControllerServiceEntity;
import com.github.hermannpencole.nifi.swagger.client.model.HistoryEntity;
import com.github.hermannpencole.nifi.swagger.client.model.NodeEntity;
import com.github.hermannpencole.nifi.swagger.client.model.RegistryClientEntity;
import com.github.hermannpencole.nifi.swagger.client.model.RegistryClientsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ReportingTaskEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ControllerApi
 */
@Ignore
public class ControllerApiTest {

    private final ControllerApi api = new ControllerApi();

    
    /**
     * Creates a new bulletin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBulletinTest() throws ApiException {
        BulletinEntity body = null;
        BulletinEntity response = api.createBulletin(body);

        // TODO: test validations
    }
    
    /**
     * Creates a new controller service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createControllerServiceTest() throws ApiException {
        ControllerServiceEntity body = null;
        ControllerServiceEntity response = api.createControllerService(body);

        // TODO: test validations
    }
    
    /**
     * Creates a new registry client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRegistryClientTest() throws ApiException {
        RegistryClientEntity body = null;
        RegistryClientEntity response = api.createRegistryClient(body);

        // TODO: test validations
    }
    
    /**
     * Creates a new reporting task
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReportingTaskTest() throws ApiException {
        ReportingTaskEntity body = null;
        ReportingTaskEntity response = api.createReportingTask(body);

        // TODO: test validations
    }
    
    /**
     * Purges history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHistoryTest() throws ApiException {
        String endDate = null;
        HistoryEntity response = api.deleteHistory(endDate);

        // TODO: test validations
    }
    
    /**
     * Removes a node from the cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() throws ApiException {
        String id = null;
        NodeEntity response = api.deleteNode(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a registry client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRegistryClientTest() throws ApiException {
        String id = null;
        String version = null;
        String clientId = null;
        RegistryClientEntity response = api.deleteRegistryClient(id, version, clientId);

        // TODO: test validations
    }
    
    /**
     * Gets the contents of the cluster
     *
     * Returns the contents of the cluster including all nodes and their status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterTest() throws ApiException {
        ClusterEntity response = api.getCluster();

        // TODO: test validations
    }
    
    /**
     * Retrieves the configuration for this NiFi Controller
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getControllerConfigTest() throws ApiException {
        ControllerConfigurationEntity response = api.getControllerConfig();

        // TODO: test validations
    }
    
    /**
     * Gets a node in the cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeTest() throws ApiException {
        String id = null;
        NodeEntity response = api.getNode(id);

        // TODO: test validations
    }
    
    /**
     * Gets a registry client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRegistryClientTest() throws ApiException {
        String id = null;
        RegistryClientEntity response = api.getRegistryClient(id);

        // TODO: test validations
    }
    
    /**
     * Gets the listing of available registry clients
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRegistryClientsTest() throws ApiException {
        RegistryClientsEntity response = api.getRegistryClients();

        // TODO: test validations
    }
    
    /**
     * Retrieves the configuration for this NiFi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateControllerConfigTest() throws ApiException {
        ControllerConfigurationEntity body = null;
        ControllerConfigurationEntity response = api.updateControllerConfig(body);

        // TODO: test validations
    }
    
    /**
     * Updates a node in the cluster
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeTest() throws ApiException {
        String id = null;
        NodeEntity body = null;
        NodeEntity response = api.updateNode(id, body);

        // TODO: test validations
    }
    
    /**
     * Updates a registry client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRegistryClientTest() throws ApiException {
        String id = null;
        RegistryClientEntity body = null;
        RegistryClientEntity response = api.updateRegistryClient(id, body);

        // TODO: test validations
    }
    
}
