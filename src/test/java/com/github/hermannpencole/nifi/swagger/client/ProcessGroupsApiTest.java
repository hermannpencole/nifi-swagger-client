/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.5.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.hermannpencole.nifi.swagger.client;

import com.github.hermannpencole.nifi.swagger.ApiException;
import com.github.hermannpencole.nifi.swagger.client.model.ConnectionEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ConnectionsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ControllerServiceEntity;
import com.github.hermannpencole.nifi.swagger.client.model.CopySnippetRequestEntity;
import com.github.hermannpencole.nifi.swagger.client.model.CreateTemplateRequestEntity;
import com.github.hermannpencole.nifi.swagger.client.model.FlowComparisonEntity;
import com.github.hermannpencole.nifi.swagger.client.model.FlowEntity;
import com.github.hermannpencole.nifi.swagger.client.model.FunnelEntity;
import com.github.hermannpencole.nifi.swagger.client.model.FunnelsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.InputPortsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.InstantiateTemplateRequestEntity;
import com.github.hermannpencole.nifi.swagger.client.model.LabelEntity;
import com.github.hermannpencole.nifi.swagger.client.model.LabelsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.OutputPortsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.PortEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ProcessGroupEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ProcessGroupsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ProcessorEntity;
import com.github.hermannpencole.nifi.swagger.client.model.ProcessorsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.RemoteProcessGroupEntity;
import com.github.hermannpencole.nifi.swagger.client.model.RemoteProcessGroupsEntity;
import com.github.hermannpencole.nifi.swagger.client.model.TemplateEntity;
import com.github.hermannpencole.nifi.swagger.client.model.VariableRegistryEntity;
import com.github.hermannpencole.nifi.swagger.client.model.VariableRegistryUpdateRequestEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProcessGroupsApi
 */
@Ignore
public class ProcessGroupsApiTest {

    private final ProcessGroupsApi api = new ProcessGroupsApi();

    
    /**
     * Copies a snippet and discards it.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySnippetTest() throws ApiException {
        String id = null;
        CopySnippetRequestEntity body = null;
        FlowEntity response = api.copySnippet(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a connection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConnectionTest() throws ApiException {
        String id = null;
        ConnectionEntity body = null;
        ConnectionEntity response = api.createConnection(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new controller service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createControllerServiceTest() throws ApiException {
        String id = null;
        ControllerServiceEntity body = null;
        ControllerServiceEntity response = api.createControllerService(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a funnel
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFunnelTest() throws ApiException {
        String id = null;
        FunnelEntity body = null;
        FunnelEntity response = api.createFunnel(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates an input port
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInputPortTest() throws ApiException {
        String id = null;
        PortEntity body = null;
        PortEntity response = api.createInputPort(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLabelTest() throws ApiException {
        String id = null;
        LabelEntity body = null;
        LabelEntity response = api.createLabel(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates an output port
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOutputPortTest() throws ApiException {
        String id = null;
        PortEntity body = null;
        PortEntity response = api.createOutputPort(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProcessGroupTest() throws ApiException {
        String id = null;
        ProcessGroupEntity body = null;
        ProcessGroupEntity response = api.createProcessGroup(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new processor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProcessorTest() throws ApiException {
        String id = null;
        ProcessorEntity body = null;
        ProcessorEntity response = api.createProcessor(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRemoteProcessGroupTest() throws ApiException {
        String id = null;
        RemoteProcessGroupEntity body = null;
        RemoteProcessGroupEntity response = api.createRemoteProcessGroup(id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a template and discards the specified snippet.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemplateTest() throws ApiException {
        String id = null;
        CreateTemplateRequestEntity body = null;
        TemplateEntity response = api.createTemplate(id, body);

        // TODO: test validations
    }
    
    /**
     * Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled.
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVariableRegistryUpdateRequestTest() throws ApiException {
        String groupId = null;
        String updateId = null;
        VariableRegistryUpdateRequestEntity response = api.deleteVariableRegistryUpdateRequest(groupId, updateId);

        // TODO: test validations
    }
    
    /**
     * Gets all connections
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectionsTest() throws ApiException {
        String id = null;
        ConnectionsEntity response = api.getConnections(id);

        // TODO: test validations
    }
    
    /**
     * Gets all funnels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFunnelsTest() throws ApiException {
        String id = null;
        FunnelsEntity response = api.getFunnels(id);

        // TODO: test validations
    }
    
    /**
     * Gets all input ports
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInputPortsTest() throws ApiException {
        String id = null;
        InputPortsEntity response = api.getInputPorts(id);

        // TODO: test validations
    }
    
    /**
     * Gets all labels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLabelsTest() throws ApiException {
        String id = null;
        LabelsEntity response = api.getLabels(id);

        // TODO: test validations
    }
    
    /**
     * Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocalModificationsTest() throws ApiException {
        String id = null;
        FlowComparisonEntity response = api.getLocalModifications(id);

        // TODO: test validations
    }
    
    /**
     * Gets all output ports
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOutputPortsTest() throws ApiException {
        String id = null;
        OutputPortsEntity response = api.getOutputPorts(id);

        // TODO: test validations
    }
    
    /**
     * Gets a process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessGroupTest() throws ApiException {
        String id = null;
        ProcessGroupEntity response = api.getProcessGroup(id);

        // TODO: test validations
    }
    
    /**
     * Gets all process groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessGroupsTest() throws ApiException {
        String id = null;
        ProcessGroupsEntity response = api.getProcessGroups(id);

        // TODO: test validations
    }
    
    /**
     * Gets all processors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessorsTest() throws ApiException {
        String id = null;
        Boolean includeDescendantGroups = null;
        ProcessorsEntity response = api.getProcessors(id, includeDescendantGroups);

        // TODO: test validations
    }
    
    /**
     * Gets all remote process groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemoteProcessGroupsTest() throws ApiException {
        String id = null;
        RemoteProcessGroupsEntity response = api.getRemoteProcessGroups(id);

        // TODO: test validations
    }
    
    /**
     * Gets a process group&#39;s variable registry
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariableRegistryTest() throws ApiException {
        String id = null;
        Boolean includeAncestorGroups = null;
        VariableRegistryEntity response = api.getVariableRegistry(id, includeAncestorGroups);

        // TODO: test validations
    }
    
    /**
     * Gets a process group&#39;s variable registry
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariableRegistryUpdateRequestTest() throws ApiException {
        String groupId = null;
        String updateId = null;
        VariableRegistryUpdateRequestEntity response = api.getVariableRegistryUpdateRequest(groupId, updateId);

        // TODO: test validations
    }
    
    /**
     * Imports a template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importTemplateTest() throws ApiException {
        String id = null;
        TemplateEntity response = api.importTemplate(id);

        // TODO: test validations
    }
    
    /**
     * Instantiates a template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void instantiateTemplateTest() throws ApiException {
        String id = null;
        InstantiateTemplateRequestEntity body = null;
        FlowEntity response = api.instantiateTemplate(id, body);

        // TODO: test validations
    }
    
    /**
     * Deletes a process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeProcessGroupTest() throws ApiException {
        String id = null;
        String version = null;
        String clientId = null;
        ProcessGroupEntity response = api.removeProcessGroup(id, version, clientId);

        // TODO: test validations
    }
    
    /**
     * Submits a request to update a process group&#39;s variable registry
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitUpdateVariableRegistryRequestTest() throws ApiException {
        String id = null;
        VariableRegistryEntity body = null;
        VariableRegistryUpdateRequestEntity response = api.submitUpdateVariableRegistryRequest(id, body);

        // TODO: test validations
    }
    
    /**
     * Updates a process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProcessGroupTest() throws ApiException {
        String id = null;
        ProcessGroupEntity body = null;
        ProcessGroupEntity response = api.updateProcessGroup(id, body);

        // TODO: test validations
    }
    
    /**
     * Updates the contents of a Process Group&#39;s variable Registry
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVariableRegistryTest() throws ApiException {
        String id = null;
        VariableRegistryEntity body = null;
        VariableRegistryEntity response = api.updateVariableRegistry(id, body);

        // TODO: test validations
    }
    
    /**
     * Uploads a template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadTemplateTest() throws ApiException {
        String id = null;
        TemplateEntity response = api.uploadTemplate(id);

        // TODO: test validations
    }
    
}
